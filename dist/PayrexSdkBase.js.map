{"version":3,"sources":["../src/PayrexSdkBase.js"],"names":["PayrexApiError","require","PayrexSdkBase","options","publicKey","secretKey","baseUrl","fetch","Url","base64Encode","Error","path","queryParams","fetchRequest","body","method","url","Object","entries","forEach","key","value","searchParams","set","headers","Headers","Accept","Authorization","toString","buildFetchOptions","then","response","status","contentType","get","includes","TypeError","json","constructor","parseResponse","code","message","module","exports"],"mappings":"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","file":"PayrexSdkBase.js","sourcesContent":["const PayrexApiError = require('./PayrexApiError');\n\nclass PayrexSdkBase {\n  /**\n   * PayrexSdkBase constructor\n   * @param {object} options\n   * @param {string} options.publicKey\n   * @param {string} options.secretKey\n   * @param {string} options.baseUrl\n   * @param {function} options.fetch [Fetch class](https://fetch.spec.whatwg.org/)\n   * @param {function} options.Url [Url class](https://url.spec.whatwg.org/)\n   * @param {function} options.base64Encode Function to encode string (utf-8) in base64\n   */\n  constructor(options) {\n    const {\n      publicKey = '',\n      secretKey = '',\n      baseUrl = 'http://localhost:3000/',\n      fetch,\n      Url,\n      base64Encode,\n    } = options;\n    // TODO: Update validation\n    if (typeof publicKey !== 'string') {\n      throw new Error('PayrexSdkBase required option \"publicKey\"');\n    }\n    if (typeof fetch !== 'function') {\n      throw new Error('PayrexSdkBase required option \"fetch\"');\n    }\n    if (typeof Url !== 'function') {\n      throw new Error('PayrexSdkBase required option \"Url\"');\n    }\n    if (typeof base64Encode !== 'function') {\n      throw new Error('PayrexSdkBase required option \"base64Encode\"');\n    }\n    this.publicKey = publicKey;\n    this.secretKey = secretKey;\n    this.baseUrl = baseUrl;\n    this.fetch = fetch;\n    this.Url = Url;\n    this.base64Encode = base64Encode;\n  }\n\n  /**\n   * Make GET request\n   * @param {string} path Path (ex. \"/users\")\n   * @param {object} queryParams  Additional query params to merge\n   * @return {Promise}\n   */\n  get(path = '', { queryParams = {} } = {}) {\n    return this.fetchRequest('GET', path, queryParams, null);\n  }\n\n  /**\n   * Make POST request\n   * @param {string} path Path (ex. \"/users\")\n   * @param {object} body Body data\n   * @param {object} queryParams  Additional query params to merge\n   * @return {Promise}\n   */\n  post(path = '', body = {}, { queryParams = {} } = {}) {\n    return this.fetchRequest('POST', path, queryParams, body);\n  }\n\n  /**\n   * Make PUT request\n   * @param {string} path Path (ex. \"/users\")\n   * @param {object} body Body data\n   * @param {object} queryParams  Additional query params to merge\n   * @return {Promise}\n   */\n  put(path = '', body = {}, { queryParams = {} } = {}) {\n    return this.fetchRequest('PUT', path, queryParams, body);\n  }\n\n  /**\n   * Make DELETE request\n   * @param {string} path Path (ex. \"/users\")\n   * @param {object} queryParams  Additional query params to merge\n   * @return {Promise}\n   */\n  remove(path = '', { queryParams = {} } = {}) {\n    return this.fetchRequest('DELETE', path, queryParams, null);\n  }\n\n  /**\n   * Build options for fetch\n   * @param method\n   * @param path\n   * @param queryParams\n   * @param body\n   * @private\n   */\n  buildFetchOptions(method = 'GET', path = '', queryParams = {}, body = {}) {\n    const url = new this.Url(path, this.baseUrl);\n    if (typeof queryParams === 'object') {\n      Object.entries(queryParams)\n        .forEach(([key, value]) => {\n          url.searchParams.set(key, value);\n        });\n    }\n    const options = {\n      method,\n      headers: new this.fetch.Headers({\n        Accept: 'application/json',\n        Authorization: `Basic ${this.base64Encode(`${this.publicKey}:${this.secretKey}`)}`,\n        'Content-type': 'application/json',\n      }),\n      body,\n    };\n    return { url: url.toString(), options };\n  }\n\n  /**\n   * Parse response\n   * @param {number} status Status code\n   * @param {object} body JSON body object\n   * @private\n   * @return {{err: null, body: {object}}}\n   */\n  static parseResponse(status, body) {\n    if (status === 200 || status === 304) {\n      return body;\n    }\n    const code = body && body.code ? body.code : null;\n    const message = body && body.message ? body.message : '';\n    if (status === 400) {\n      throw new PayrexApiError(code === null ? 'ValidationFailed' : code, message);\n    }\n    if (status === 404) {\n      throw new PayrexApiError(code === null ? 'NotFound' : code, message);\n    }\n    if (status === 403) {\n      throw new PayrexApiError(code === null ? 'Forbidden' : code, message);\n    }\n    if (status === 500) {\n      throw new PayrexApiError(code === null ? 'ServerError' : code, message);\n    }\n    throw new PayrexApiError('UnexpectedStatusCode', 'UnexpectedStatusCode');\n  }\n\n  fetchRequest(method, path, queryParams, body) {\n    const { url, options } = this.buildFetchOptions(method, path, queryParams, body);\n    return this\n      .fetch(url, options)\n      .then((response) => {\n        const { status } = response;\n        const contentType = response.headers.get('content-type');\n        if (!(contentType && contentType.includes('application/json'))) {\n          throw new TypeError('Expected to recieve JSON');\n        }\n        return response\n          .json()\n          .then(json => this.constructor.parseResponse(status, json));\n      });\n  }\n}\n\nPayrexSdkBase.PayrexApiError = PayrexApiError;\n\nmodule.exports = PayrexSdkBase;\n"]}